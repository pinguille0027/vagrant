#!/usr/sbin/nft -f

flush ruleset

table ip nat {
	chain prerouting {
		type nat hook prerouting priority 0; policy accept;
    	}
    	chain postrouting {
		type nat hook postrouting priority 100; policy accept;
		ip saddr 172.16.1.0/24 snat to 192.168.1.157
		
    	}
}


table ip filter {
	set  CLEANUPIP {
		type ipv4_addr 
		flags interval
		elements = { 10.0.2.255/32, 192.168.1.255/32, 192.168.0.255/32, 172.16.1.255/32, 255.255.255.255/32, 224.0.0.1/32, }
	}

	set DEBIANSECURITY {
		type ipv4_addr
		flags interval
		elements = { 151.101.194.132, 151.101.2.132, 151.101.66.132, 151.101.130.132, }

	}
	chain trafico_entrante {
		type filter hook input priority 0; policy drop;
			
		# conexions establecidas/relacionadas
		ct state established,related accept

		# conexiones no válidas
		ct state invalid drop

		# intefez de loopback
		iif lo accept

		# ICMP e IGMP
		icmp type { destination-unreachable, router-solicitation, router-advertisement, time-exceeded, parameter-problem } accept
		ip protocol igmp accept

		# PING
		icmp type echo-request accept
		
		# SSH desde ETH0 para vagrant
		iif eth0 tcp dport 22 accept	

		# SSH dende o antitrion por bridge
		ip saddr { 172.16.1.2, 192.168.1.31 } tcp dport ssh log prefix "ENTRANTE SSH ACCEPT: " accept

		# SSH dende o Trono-01
		ip saddr 172.16.1.2 tcp dport ssh accept

		# Cleanup Rule
		ip daddr @CLEANUPIP drop
		
		# Rexistramos antes de desbotar
		log prefix "DROP ENTRANTE: "
		
			
	}
	chain trafico_saliente {
		type filter hook output priority 0; policy drop;

		# conexions establecidas/relacionadas
		ct state established,related accept

		# conexiones no válidas
		ct state invalid drop

		# intefez de loopback
		iif lo accept

	
		# PING
		icmp type echo-request accept

		# DNS
		udp dport 53 accept

		# NTP
		udp dport 123 accept
		
		# SAIDA AOS REPOS
		ip daddr deb.debian.org tcp dport 443 accept
		ip daddr @DEBIANSECURITY tcp dport 443 accept
		
		# Rexistramos antes de desbotar
		log prefix "DROP SAINTE: "
	}
	chain trafico_que_atravesa_rint {
		type filter hook forward priority 0; policy drop;
		
		# conexions establecidas/relacionadas
		ct state established,related accept

		# conexiones no válidas
		ct state invalid drop
		
		# ping
		ip saddr 172.16.1.0/24 icmp type echo-request accept
		
		# dns e ntp
		ip saddr 172.16.1.0/24 udp dport { 53, 123 } accept

		
		
		# web  
		ip saddr 172.16.1.0/24 tcp dport { 80,443 } log prefix "FORWARD TRAFICO WEB ACCEPT :"  accept
				
		# Rexistramos antes de desbotar
		log prefix "DROP FORWARD: "
	}
}

## REXEITAMOS TODO TRAFICO A TRAVES DE IPV6
table ip6 filter {
	chain trafico_entrante {
		type filter hook input priority 0; policy drop;

	}

	chain trafico_sainte {
		type filter hook output priority 0; policy drop;

	}
	
	chain trafico_que_atravesa_rint {
		type filter hook forward priority 0; policy drop;	

	}
}
